
// cashNinjaJsonString0 has the transaction as a hex-string
export const cashNinjaJsonString0 = `{"transaction":"02000000021662e68cb471cef702a3f0bc5227737887ce790714e7c45ffb6f215ef01b806200000000a7004ca4028713141b07ddefd36439f60bf596c4f891f8f6ce3dbe20011903404b4c5479009c63c0009d00cf8176557aa169c453a16900cd00c78800d100ce8876537a9300d28800cc00c6537a939d51cc02e8039d51d28800ce01207f7551d188c4539c6352d10088686d5167547a519d5579a9537a88537a547aadc3519d00cf81537aa163c4529d00cd00c78800d100ce8800d200cf8851d1008867c4519d00d10088686d5168feffffffd94402d4efa7621faee88109bd4f9044f4d87f47cf0a60170a58ce8ae4a71ed10000000000feffffff03284f4c000000000048efacd8c6620010efc41558a398a6bf2e90ea3a32ef4a3840c392237ca01054a9776202f406aa203e7393b927649d62674dfa9883b0faa27188730ee7b4086fa5861b2df915142a87e8030000000000003eefacd8c6620010efc41558a398a6bf2e90ea3a32ef4a3840c392237ca01054a9776002db0676a9148ee26d6c9f58369f94864dc3630cdeb17fae2f2d88acbf50bf07000000001976a9148ee26d6c9f58369f94864dc3630cdeb17fae2f2d88ac00000000","sourceOutputs":[{"outpointIndex":0,"outpointTransactionHash":"<Uint8Array: 0x62801bf05e216ffb5fc4e7140779ce8778732752bcf0a302f7ce71b48ce66216>","sequenceNumber":4294967294,"unlockingBytecode":"<Uint8Array: 0x004ca4028713141b07ddefd36439f60bf596c4f891f8f6ce3dbe20011903404b4c5479009c63c0009d00cf8176557aa169c453a16900cd00c78800d100ce8876537a9300d28800cc00c6537a939d51cc02e8039d51d28800ce01207f7551d188c4539c6352d10088686d5167547a519d5579a9537a88537a547aadc3519d00cf81537aa163c4529d00cd00c78800d100ce8800d200cf8851d1008867c4519d00d10088686d5168>","lockingBytecode":"<Uint8Array: 0xaa203e7393b927649d62674dfa9883b0faa27188730ee7b4086fa5861b2df915142a87>","valueSatoshis":"<bigint: 1000n>","token":{"amount":"<bigint: 0n>","category":"<Uint8Array: 0x77a95410a07c2392c340384aef323aea902ebfa698a35815c4ef100062c6d8ac>","nft":{"capability":"minting","commitment":"<Uint8Array: 0xdb06>"}},"contract":{"abiFunction":{"name":"mintNFT","inputs":[]},"redeemScript":["<Uint8Array: 0x8713>","<Uint8Array: 0x1b07ddefd36439f60bf596c4f891f8f6ce3dbe20>","<Uint8Array: 0x19>","<Uint8Array: 0x404b4c>",84,121,"<Uint8Array: 0x>",156,99,192,"<Uint8Array: 0x>",157,"<Uint8Array: 0x>",207,129,118,85,122,161,105,196,83,161,105,"<Uint8Array: 0x>",205,"<Uint8Array: 0x>",199,136,"<Uint8Array: 0x>",209,"<Uint8Array: 0x>",206,136,118,83,122,147,"<Uint8Array: 0x>",210,136,"<Uint8Array: 0x>",204,"<Uint8Array: 0x>",198,83,122,147,157,81,204,"<Uint8Array: 0xe803>",157,81,210,136,"<Uint8Array: 0x>",206,"<Uint8Array: 0x20>",127,117,81,209,136,196,83,156,99,82,209,"<Uint8Array: 0x>",136,104,109,81,103,84,122,81,157,85,121,169,83,122,136,83,122,84,122,173,195,81,157,"<Uint8Array: 0x>",207,129,83,122,161,99,196,82,157,"<Uint8Array: 0x>",205,"<Uint8Array: 0x>",199,136,"<Uint8Array: 0x>",209,"<Uint8Array: 0x>",206,136,"<Uint8Array: 0x>",210,"<Uint8Array: 0x>",207,136,81,209,"<Uint8Array: 0x>",136,103,196,81,157,"<Uint8Array: 0x>",209,"<Uint8Array: 0x>",136,104,109,81,104],"artifact":{"contractName":"Mint","constructorInputs":[{"name":"mintPrice","type":"int"},{"name":"increment","type":"int"},{"name":"pkhPayout","type":"bytes20"},{"name":"maximumCount","type":"int"}],"abi":[{"name":"mintNFT","inputs":[]},{"name":"payout","inputs":[{"name":"sigPayout","type":"sig"},{"name":"pkPayout","type":"pubkey"}]}],"bytecode":"OP_4 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_BIN2NUM OP_DUP OP_5 OP_ROLL OP_LESSTHANOREQUAL OP_VERIFY OP_TXOUTPUTCOUNT OP_3 OP_LESSTHANOREQUAL OP_VERIFY OP_0 OP_OUTPUTBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_DUP OP_3 OP_ROLL OP_ADD OP_0 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_OUTPUTVALUE OP_0 OP_UTXOVALUE OP_3 OP_ROLL OP_ADD OP_NUMEQUALVERIFY OP_1 OP_OUTPUTVALUE e803 OP_NUMEQUALVERIFY OP_1 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_1 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_TXOUTPUTCOUNT OP_3 OP_NUMEQUAL OP_IF OP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_2DROP OP_1 OP_ELSE OP_4 OP_ROLL OP_1 OP_NUMEQUALVERIFY OP_5 OP_PICK OP_HASH160 OP_3 OP_ROLL OP_EQUALVERIFY OP_3 OP_ROLL OP_4 OP_ROLL OP_CHECKSIGVERIFY OP_TXINPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_BIN2NUM OP_3 OP_ROLL OP_LESSTHANOREQUAL OP_IF OP_TXOUTPUTCOUNT OP_2 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ELSE OP_TXOUTPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_2DROP OP_1 OP_ENDIF","source":"pragma cashscript ^0.8.0;\\r\\n\\r\\n// Multi-threaded minting smart contract\\r\\n\\r\\n// Contract holds the next NFT nummber to mint as state in the commitment field of the minting NFT\\r\\n// Contract consists of a mintNFT and a payout function\\r\\n\\r\\n// Opcode count: 84 (max 201)\\r\\n// Bytesize: 163 (max 520)\\r\\n\\r\\ncontract Mint(\\r\\n    int mintPrice,\\r\\n    int increment,\\r\\n    bytes20 pkhPayout,\\r\\n    int maximumCount\\r\\n) {\\r\\n    function mintNFT() {\\r\\n        // require minting contract to be at input index zero\\r\\n        require(this.activeInputIndex == 0);\\r\\n\\r\\n        // Read nftNumber from contract commitment\\r\\n        bytes commitment = tx.inputs[0].nftCommitment;\\r\\n        int nftNumber = int(commitment);\\r\\n        \\r\\n        // Check if minting is still allowed\\r\\n        require(nftNumber <= maximumCount);\\r\\n\\r\\n        // Limit the max number of outputs to 3\\r\\n        require(tx.outputs.length <= 3);\\r\\n            \\r\\n        // Output#0 preserves the NFT minting contract with a minting nft holding the new state and increased BCH value\\r\\n        require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);\\r\\n        require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);\\r\\n        int nextNftNumber = nftNumber + increment;\\r\\n        require(tx.outputs[0].nftCommitment == bytes(nextNftNumber));\\r\\n        require(tx.outputs[0].value == tx.inputs[0].value + mintPrice);\\r\\n\\r\\n        // Output#1 for the minted NFT\\r\\n        require(tx.outputs[1].value == 1000);\\r\\n        require(tx.outputs[1].nftCommitment == bytes(nftNumber));\\r\\n        // Strip capability to get the tokenId for an immutable NFT\\r\\n        bytes tokenId = tx.inputs[0].tokenCategory.split(32)[0];\\r\\n        require(tx.outputs[1].tokenCategory == tokenId);\\r\\n\\r\\n        // Allow for BCH change output\\r\\n        if(tx.outputs.length == 3){\\r\\n            // Output#2 BCH change output for minter\\r\\n            require(tx.outputs[2].tokenCategory == 0x);\\r\\n        }\\r\\n    }\\r\\n    function payout(sig sigPayout, pubkey pkPayout) {\\r\\n        // Check the signature & public key against pkhPayout\\r\\n        require(hash160(pkPayout) == pkhPayout);\\r\\n        require(checkSig(sigPayout, pkPayout));\\r\\n        \\r\\n        // require minting contract to be at input index zero\\r\\n        require(tx.inputs.length == 1);\\r\\n\\r\\n        // Read count from contract commitment\\r\\n        bytes commitment = tx.inputs[0].nftCommitment;\\r\\n        int nftNumber = int(commitment);\\r\\n\\r\\n        // Check if minting is still ongoing\\r\\n        if(nftNumber <= maximumCount){\\r\\n            // Limit the number of outputs to 2\\r\\n            require(tx.outputs.length == 2);\\r\\n                \\r\\n            // Output#0 preserves the NFT minting contract with same minting nft\\r\\n            require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);\\r\\n            require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);\\r\\n            require(tx.outputs[0].nftCommitment == tx.inputs[0].nftCommitment);\\r\\n\\r\\n            // Output#1 payout output\\r\\n            require(tx.outputs[1].tokenCategory == 0x);\\r\\n        } else {\\r\\n            // Output#0 payout output\\r\\n            require(tx.outputs.length == 1);\\r\\n\\r\\n            // Burns minting NFT\\r\\n            require(tx.outputs[0].tokenCategory == 0x);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n","compiler":{"name":"cashc","version":"0.8.1"},"updatedAt":"2023-09-16T11:11:05.608Z"}}},{"outpointIndex":0,"outpointTransactionHash":"<Uint8Array: 0xd11ea7e48ace580a17600acf477fd8f444904fbd0981e8ae1f62a7efd40244d9>","sequenceNumber":4294967294,"unlockingBytecode":"<Uint8Array: 0x>","lockingBytecode":"<Uint8Array: 0x76a9148ee26d6c9f58369f94864dc3630cdeb17fae2f2d88ac>","valueSatoshis":"<bigint: 134980559n>"}],"broadcast":true,"userPrompt":"Mint Cash-Ninja NFT"}`;
// cashNinjaJsonString1 has the transaction as an libauth-stringified object
export const cashNinjaJsonString1 = `{"transaction":{"inputs":[{"outpointIndex":0,"outpointTransactionHash":"<Uint8Array: 0x62801bf05e216ffb5fc4e7140779ce8778732752bcf0a302f7ce71b48ce66216>","sequenceNumber":4294967294,"unlockingBytecode":"<Uint8Array: 0x004ca4028713141b07ddefd36439f60bf596c4f891f8f6ce3dbe20011903404b4c5479009c63c0009d00cf8176557aa169c453a16900cd00c78800d100ce8876537a9300d28800cc00c6537a939d51cc02e8039d51d28800ce01207f7551d188c4539c6352d10088686d5167547a519d5579a9537a88537a547aadc3519d00cf81537aa163c4529d00cd00c78800d100ce8800d200cf8851d1008867c4519d00d10088686d5168>"},{"outpointIndex":0,"outpointTransactionHash":"<Uint8Array: 0xd11ea7e48ace580a17600acf477fd8f444904fbd0981e8ae1f62a7efd40244d9>","sequenceNumber":4294967294,"unlockingBytecode":"<Uint8Array: 0x>"}],"locktime":0,"outputs":[{"lockingBytecode":"<Uint8Array: 0xaa203e7393b927649d62674dfa9883b0faa27188730ee7b4086fa5861b2df915142a87>","token":{"amount":"<bigint: 0n>","category":"<Uint8Array: 0x77a95410a07c2392c340384aef323aea902ebfa698a35815c4ef100062c6d8ac>","nft":{"capability":"minting","commitment":"<Uint8Array: 0xf406>"}},"valueSatoshis":"<bigint: 5001000n>"},{"lockingBytecode":"<Uint8Array: 0x76a9148ee26d6c9f58369f94864dc3630cdeb17fae2f2d88ac>","token":{"amount":"<bigint: 0n>","category":"<Uint8Array: 0x77a95410a07c2392c340384aef323aea902ebfa698a35815c4ef100062c6d8ac>","nft":{"capability":"none","commitment":"<Uint8Array: 0xdb06>"}},"valueSatoshis":"<bigint: 1000n>"},{"lockingBytecode":"<Uint8Array: 0x76a9148ee26d6c9f58369f94864dc3630cdeb17fae2f2d88ac>","valueSatoshis":"<bigint: 129978559n>"}],"version":2},"sourceOutputs":[{"outpointIndex":0,"outpointTransactionHash":"<Uint8Array: 0x62801bf05e216ffb5fc4e7140779ce8778732752bcf0a302f7ce71b48ce66216>","sequenceNumber":4294967294,"unlockingBytecode":"<Uint8Array: 0x004ca4028713141b07ddefd36439f60bf596c4f891f8f6ce3dbe20011903404b4c5479009c63c0009d00cf8176557aa169c453a16900cd00c78800d100ce8876537a9300d28800cc00c6537a939d51cc02e8039d51d28800ce01207f7551d188c4539c6352d10088686d5167547a519d5579a9537a88537a547aadc3519d00cf81537aa163c4529d00cd00c78800d100ce8800d200cf8851d1008867c4519d00d10088686d5168>","lockingBytecode":"<Uint8Array: 0xaa203e7393b927649d62674dfa9883b0faa27188730ee7b4086fa5861b2df915142a87>","valueSatoshis":"<bigint: 1000n>","token":{"amount":"<bigint: 0n>","category":"<Uint8Array: 0x77a95410a07c2392c340384aef323aea902ebfa698a35815c4ef100062c6d8ac>","nft":{"capability":"minting","commitment":"<Uint8Array: 0xdb06>"}},"contract":{"abiFunction":{"name":"mintNFT","inputs":[]},"redeemScript":["<Uint8Array: 0x8713>","<Uint8Array: 0x1b07ddefd36439f60bf596c4f891f8f6ce3dbe20>","<Uint8Array: 0x19>","<Uint8Array: 0x404b4c>",84,121,"<Uint8Array: 0x>",156,99,192,"<Uint8Array: 0x>",157,"<Uint8Array: 0x>",207,129,118,85,122,161,105,196,83,161,105,"<Uint8Array: 0x>",205,"<Uint8Array: 0x>",199,136,"<Uint8Array: 0x>",209,"<Uint8Array: 0x>",206,136,118,83,122,147,"<Uint8Array: 0x>",210,136,"<Uint8Array: 0x>",204,"<Uint8Array: 0x>",198,83,122,147,157,81,204,"<Uint8Array: 0xe803>",157,81,210,136,"<Uint8Array: 0x>",206,"<Uint8Array: 0x20>",127,117,81,209,136,196,83,156,99,82,209,"<Uint8Array: 0x>",136,104,109,81,103,84,122,81,157,85,121,169,83,122,136,83,122,84,122,173,195,81,157,"<Uint8Array: 0x>",207,129,83,122,161,99,196,82,157,"<Uint8Array: 0x>",205,"<Uint8Array: 0x>",199,136,"<Uint8Array: 0x>",209,"<Uint8Array: 0x>",206,136,"<Uint8Array: 0x>",210,"<Uint8Array: 0x>",207,136,81,209,"<Uint8Array: 0x>",136,103,196,81,157,"<Uint8Array: 0x>",209,"<Uint8Array: 0x>",136,104,109,81,104],"artifact":{"contractName":"Mint","constructorInputs":[{"name":"mintPrice","type":"int"},{"name":"increment","type":"int"},{"name":"pkhPayout","type":"bytes20"},{"name":"maximumCount","type":"int"}],"abi":[{"name":"mintNFT","inputs":[]},{"name":"payout","inputs":[{"name":"sigPayout","type":"sig"},{"name":"pkPayout","type":"pubkey"}]}],"bytecode":"OP_4 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_BIN2NUM OP_DUP OP_5 OP_ROLL OP_LESSTHANOREQUAL OP_VERIFY OP_TXOUTPUTCOUNT OP_3 OP_LESSTHANOREQUAL OP_VERIFY OP_0 OP_OUTPUTBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_DUP OP_3 OP_ROLL OP_ADD OP_0 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_OUTPUTVALUE OP_0 OP_UTXOVALUE OP_3 OP_ROLL OP_ADD OP_NUMEQUALVERIFY OP_1 OP_OUTPUTVALUE e803 OP_NUMEQUALVERIFY OP_1 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_1 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_TXOUTPUTCOUNT OP_3 OP_NUMEQUAL OP_IF OP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_2DROP OP_1 OP_ELSE OP_4 OP_ROLL OP_1 OP_NUMEQUALVERIFY OP_5 OP_PICK OP_HASH160 OP_3 OP_ROLL OP_EQUALVERIFY OP_3 OP_ROLL OP_4 OP_ROLL OP_CHECKSIGVERIFY OP_TXINPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_BIN2NUM OP_3 OP_ROLL OP_LESSTHANOREQUAL OP_IF OP_TXOUTPUTCOUNT OP_2 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ELSE OP_TXOUTPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_2DROP OP_1 OP_ENDIF","source":"pragma cashscript ^0.8.0;\\r\\n\\r\\n// Multi-threaded minting smart contract\\r\\n\\r\\n// Contract holds the next NFT nummber to mint as state in the commitment field of the minting NFT\\r\\n// Contract consists of a mintNFT and a payout function\\r\\n\\r\\n// Opcode count: 84 (max 201)\\r\\n// Bytesize: 163 (max 520)\\r\\n\\r\\ncontract Mint(\\r\\n    int mintPrice,\\r\\n    int increment,\\r\\n    bytes20 pkhPayout,\\r\\n    int maximumCount\\r\\n) {\\r\\n    function mintNFT() {\\r\\n        // require minting contract to be at input index zero\\r\\n        require(this.activeInputIndex == 0);\\r\\n\\r\\n        // Read nftNumber from contract commitment\\r\\n        bytes commitment = tx.inputs[0].nftCommitment;\\r\\n        int nftNumber = int(commitment);\\r\\n        \\r\\n        // Check if minting is still allowed\\r\\n        require(nftNumber <= maximumCount);\\r\\n\\r\\n        // Limit the max number of outputs to 3\\r\\n        require(tx.outputs.length <= 3);\\r\\n            \\r\\n        // Output#0 preserves the NFT minting contract with a minting nft holding the new state and increased BCH value\\r\\n        require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);\\r\\n        require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);\\r\\n        int nextNftNumber = nftNumber + increment;\\r\\n        require(tx.outputs[0].nftCommitment == bytes(nextNftNumber));\\r\\n        require(tx.outputs[0].value == tx.inputs[0].value + mintPrice);\\r\\n\\r\\n        // Output#1 for the minted NFT\\r\\n        require(tx.outputs[1].value == 1000);\\r\\n        require(tx.outputs[1].nftCommitment == bytes(nftNumber));\\r\\n        // Strip capability to get the tokenId for an immutable NFT\\r\\n        bytes tokenId = tx.inputs[0].tokenCategory.split(32)[0];\\r\\n        require(tx.outputs[1].tokenCategory == tokenId);\\r\\n\\r\\n        // Allow for BCH change output\\r\\n        if(tx.outputs.length == 3){\\r\\n            // Output#2 BCH change output for minter\\r\\n            require(tx.outputs[2].tokenCategory == 0x);\\r\\n        }\\r\\n    }\\r\\n    function payout(sig sigPayout, pubkey pkPayout) {\\r\\n        // Check the signature & public key against pkhPayout\\r\\n        require(hash160(pkPayout) == pkhPayout);\\r\\n        require(checkSig(sigPayout, pkPayout));\\r\\n        \\r\\n        // require minting contract to be at input index zero\\r\\n        require(tx.inputs.length == 1);\\r\\n\\r\\n        // Read count from contract commitment\\r\\n        bytes commitment = tx.inputs[0].nftCommitment;\\r\\n        int nftNumber = int(commitment);\\r\\n\\r\\n        // Check if minting is still ongoing\\r\\n        if(nftNumber <= maximumCount){\\r\\n            // Limit the number of outputs to 2\\r\\n            require(tx.outputs.length == 2);\\r\\n                \\r\\n            // Output#0 preserves the NFT minting contract with same minting nft\\r\\n            require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);\\r\\n            require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);\\r\\n            require(tx.outputs[0].nftCommitment == tx.inputs[0].nftCommitment);\\r\\n\\r\\n            // Output#1 payout output\\r\\n            require(tx.outputs[1].tokenCategory == 0x);\\r\\n        } else {\\r\\n            // Output#0 payout output\\r\\n            require(tx.outputs.length == 1);\\r\\n\\r\\n            // Burns minting NFT\\r\\n            require(tx.outputs[0].tokenCategory == 0x);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n","compiler":{"name":"cashc","version":"0.8.1"},"updatedAt":"2023-09-16T11:11:05.608Z"}}},{"outpointIndex":0,"outpointTransactionHash":"<Uint8Array: 0xd11ea7e48ace580a17600acf477fd8f444904fbd0981e8ae1f62a7efd40244d9>","sequenceNumber":4294967294,"unlockingBytecode":"<Uint8Array: 0x>","lockingBytecode":"<Uint8Array: 0x76a9148ee26d6c9f58369f94864dc3630cdeb17fae2f2d88ac>","valueSatoshis":"<bigint: 134980559n>"}],"broadcast":true,"userPrompt":"Mint Cash-Ninja NFT"}`;

// We also have a respective decoded object for the above JSON string
export const cashNinjaDecodedObj0 = {
  "transaction": "02000000021662e68cb471cef702a3f0bc5227737887ce790714e7c45ffb6f215ef01b806200000000a7004ca4028713141b07ddefd36439f60bf596c4f891f8f6ce3dbe20011903404b4c5479009c63c0009d00cf8176557aa169c453a16900cd00c78800d100ce8876537a9300d28800cc00c6537a939d51cc02e8039d51d28800ce01207f7551d188c4539c6352d10088686d5167547a519d5579a9537a88537a547aadc3519d00cf81537aa163c4529d00cd00c78800d100ce8800d200cf8851d1008867c4519d00d10088686d5168feffffffd94402d4efa7621faee88109bd4f9044f4d87f47cf0a60170a58ce8ae4a71ed10000000000feffffff03284f4c000000000048efacd8c6620010efc41558a398a6bf2e90ea3a32ef4a3840c392237ca01054a9776202f406aa203e7393b927649d62674dfa9883b0faa27188730ee7b4086fa5861b2df915142a87e8030000000000003eefacd8c6620010efc41558a398a6bf2e90ea3a32ef4a3840c392237ca01054a9776002db0676a9148ee26d6c9f58369f94864dc3630cdeb17fae2f2d88acbf50bf07000000001976a9148ee26d6c9f58369f94864dc3630cdeb17fae2f2d88ac00000000",
  "sourceOutputs": [
    {
      "outpointIndex": 0,
      "outpointTransactionHash": {
        "0": 98,
        "1": 128,
        "2": 27,
        "3": 240,
        "4": 94,
        "5": 33,
        "6": 111,
        "7": 251,
        "8": 95,
        "9": 196,
        "10": 231,
        "11": 20,
        "12": 7,
        "13": 121,
        "14": 206,
        "15": 135,
        "16": 120,
        "17": 115,
        "18": 39,
        "19": 82,
        "20": 188,
        "21": 240,
        "22": 163,
        "23": 2,
        "24": 247,
        "25": 206,
        "26": 113,
        "27": 180,
        "28": 140,
        "29": 230,
        "30": 98,
        "31": 22
      },
      "sequenceNumber": 4294967294,
      "unlockingBytecode": {
        "0": 0,
        "1": 76,
        "2": 164,
        "3": 2,
        "4": 135,
        "5": 19,
        "6": 20,
        "7": 27,
        "8": 7,
        "9": 221,
        "10": 239,
        "11": 211,
        "12": 100,
        "13": 57,
        "14": 246,
        "15": 11,
        "16": 245,
        "17": 150,
        "18": 196,
        "19": 248,
        "20": 145,
        "21": 248,
        "22": 246,
        "23": 206,
        "24": 61,
        "25": 190,
        "26": 32,
        "27": 1,
        "28": 25,
        "29": 3,
        "30": 64,
        "31": 75,
        "32": 76,
        "33": 84,
        "34": 121,
        "35": 0,
        "36": 156,
        "37": 99,
        "38": 192,
        "39": 0,
        "40": 157,
        "41": 0,
        "42": 207,
        "43": 129,
        "44": 118,
        "45": 85,
        "46": 122,
        "47": 161,
        "48": 105,
        "49": 196,
        "50": 83,
        "51": 161,
        "52": 105,
        "53": 0,
        "54": 205,
        "55": 0,
        "56": 199,
        "57": 136,
        "58": 0,
        "59": 209,
        "60": 0,
        "61": 206,
        "62": 136,
        "63": 118,
        "64": 83,
        "65": 122,
        "66": 147,
        "67": 0,
        "68": 210,
        "69": 136,
        "70": 0,
        "71": 204,
        "72": 0,
        "73": 198,
        "74": 83,
        "75": 122,
        "76": 147,
        "77": 157,
        "78": 81,
        "79": 204,
        "80": 2,
        "81": 232,
        "82": 3,
        "83": 157,
        "84": 81,
        "85": 210,
        "86": 136,
        "87": 0,
        "88": 206,
        "89": 1,
        "90": 32,
        "91": 127,
        "92": 117,
        "93": 81,
        "94": 209,
        "95": 136,
        "96": 196,
        "97": 83,
        "98": 156,
        "99": 99,
        "100": 82,
        "101": 209,
        "102": 0,
        "103": 136,
        "104": 104,
        "105": 109,
        "106": 81,
        "107": 103,
        "108": 84,
        "109": 122,
        "110": 81,
        "111": 157,
        "112": 85,
        "113": 121,
        "114": 169,
        "115": 83,
        "116": 122,
        "117": 136,
        "118": 83,
        "119": 122,
        "120": 84,
        "121": 122,
        "122": 173,
        "123": 195,
        "124": 81,
        "125": 157,
        "126": 0,
        "127": 207,
        "128": 129,
        "129": 83,
        "130": 122,
        "131": 161,
        "132": 99,
        "133": 196,
        "134": 82,
        "135": 157,
        "136": 0,
        "137": 205,
        "138": 0,
        "139": 199,
        "140": 136,
        "141": 0,
        "142": 209,
        "143": 0,
        "144": 206,
        "145": 136,
        "146": 0,
        "147": 210,
        "148": 0,
        "149": 207,
        "150": 136,
        "151": 81,
        "152": 209,
        "153": 0,
        "154": 136,
        "155": 103,
        "156": 196,
        "157": 81,
        "158": 157,
        "159": 0,
        "160": 209,
        "161": 0,
        "162": 136,
        "163": 104,
        "164": 109,
        "165": 81,
        "166": 104
      },
      "lockingBytecode": {
        "0": 170,
        "1": 32,
        "2": 62,
        "3": 115,
        "4": 147,
        "5": 185,
        "6": 39,
        "7": 100,
        "8": 157,
        "9": 98,
        "10": 103,
        "11": 77,
        "12": 250,
        "13": 152,
        "14": 131,
        "15": 176,
        "16": 250,
        "17": 162,
        "18": 113,
        "19": 136,
        "20": 115,
        "21": 14,
        "22": 231,
        "23": 180,
        "24": 8,
        "25": 111,
        "26": 165,
        "27": 134,
        "28": 27,
        "29": 45,
        "30": 249,
        "31": 21,
        "32": 20,
        "33": 42,
        "34": 135
      },
      "valueSatoshis": 1000n,
      "token": {
        "amount": 0n,
        "category": {
          "0": 119,
          "1": 169,
          "2": 84,
          "3": 16,
          "4": 160,
          "5": 124,
          "6": 35,
          "7": 146,
          "8": 195,
          "9": 64,
          "10": 56,
          "11": 74,
          "12": 239,
          "13": 50,
          "14": 58,
          "15": 234,
          "16": 144,
          "17": 46,
          "18": 191,
          "19": 166,
          "20": 152,
          "21": 163,
          "22": 88,
          "23": 21,
          "24": 196,
          "25": 239,
          "26": 16,
          "27": 0,
          "28": 98,
          "29": 198,
          "30": 216,
          "31": 172
        },
        "nft": {
          "capability": "minting",
          "commitment": {
            "0": 219,
            "1": 6
          }
        }
      },
      "contract": {
        "abiFunction": {
          "name": "mintNFT",
          "inputs": []
        },
        "redeemScript": [
          {
            "0": 135,
            "1": 19
          },
          {
            "0": 27,
            "1": 7,
            "2": 221,
            "3": 239,
            "4": 211,
            "5": 100,
            "6": 57,
            "7": 246,
            "8": 11,
            "9": 245,
            "10": 150,
            "11": 196,
            "12": 248,
            "13": 145,
            "14": 248,
            "15": 246,
            "16": 206,
            "17": 61,
            "18": 190,
            "19": 32
          },
          {
            "0": 25
          },
          {
            "0": 64,
            "1": 75,
            "2": 76
          },
          84,
          121,
          {},
          156,
          99,
          192,
          {},
          157,
          {},
          207,
          129,
          118,
          85,
          122,
          161,
          105,
          196,
          83,
          161,
          105,
          {},
          205,
          {},
          199,
          136,
          {},
          209,
          {},
          206,
          136,
          118,
          83,
          122,
          147,
          {},
          210,
          136,
          {},
          204,
          {},
          198,
          83,
          122,
          147,
          157,
          81,
          204,
          {
            "0": 232,
            "1": 3
          },
          157,
          81,
          210,
          136,
          {},
          206,
          {
            "0": 32
          },
          127,
          117,
          81,
          209,
          136,
          196,
          83,
          156,
          99,
          82,
          209,
          {},
          136,
          104,
          109,
          81,
          103,
          84,
          122,
          81,
          157,
          85,
          121,
          169,
          83,
          122,
          136,
          83,
          122,
          84,
          122,
          173,
          195,
          81,
          157,
          {},
          207,
          129,
          83,
          122,
          161,
          99,
          196,
          82,
          157,
          {},
          205,
          {},
          199,
          136,
          {},
          209,
          {},
          206,
          136,
          {},
          210,
          {},
          207,
          136,
          81,
          209,
          {},
          136,
          103,
          196,
          81,
          157,
          {},
          209,
          {},
          136,
          104,
          109,
          81,
          104
        ],
        "artifact": {
          "contractName": "Mint",
          "constructorInputs": [
            {
              "name": "mintPrice",
              "type": "int"
            },
            {
              "name": "increment",
              "type": "int"
            },
            {
              "name": "pkhPayout",
              "type": "bytes20"
            },
            {
              "name": "maximumCount",
              "type": "int"
            }
          ],
          "abi": [
            {
              "name": "mintNFT",
              "inputs": []
            },
            {
              "name": "payout",
              "inputs": [
                {
                  "name": "sigPayout",
                  "type": "sig"
                },
                {
                  "name": "pkPayout",
                  "type": "pubkey"
                }
              ]
            }
          ],
          "bytecode": "OP_4 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_BIN2NUM OP_DUP OP_5 OP_ROLL OP_LESSTHANOREQUAL OP_VERIFY OP_TXOUTPUTCOUNT OP_3 OP_LESSTHANOREQUAL OP_VERIFY OP_0 OP_OUTPUTBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_DUP OP_3 OP_ROLL OP_ADD OP_0 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_OUTPUTVALUE OP_0 OP_UTXOVALUE OP_3 OP_ROLL OP_ADD OP_NUMEQUALVERIFY OP_1 OP_OUTPUTVALUE e803 OP_NUMEQUALVERIFY OP_1 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_1 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_TXOUTPUTCOUNT OP_3 OP_NUMEQUAL OP_IF OP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_2DROP OP_1 OP_ELSE OP_4 OP_ROLL OP_1 OP_NUMEQUALVERIFY OP_5 OP_PICK OP_HASH160 OP_3 OP_ROLL OP_EQUALVERIFY OP_3 OP_ROLL OP_4 OP_ROLL OP_CHECKSIGVERIFY OP_TXINPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_BIN2NUM OP_3 OP_ROLL OP_LESSTHANOREQUAL OP_IF OP_TXOUTPUTCOUNT OP_2 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ELSE OP_TXOUTPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_2DROP OP_1 OP_ENDIF",
          "source": "pragma cashscript ^0.8.0;\r\n\r\n// Multi-threaded minting smart contract\r\n\r\n// Contract holds the next NFT nummber to mint as state in the commitment field of the minting NFT\r\n// Contract consists of a mintNFT and a payout function\r\n\r\n// Opcode count: 84 (max 201)\r\n// Bytesize: 163 (max 520)\r\n\r\ncontract Mint(\r\n    int mintPrice,\r\n    int increment,\r\n    bytes20 pkhPayout,\r\n    int maximumCount\r\n) {\r\n    function mintNFT() {\r\n        // require minting contract to be at input index zero\r\n        require(this.activeInputIndex == 0);\r\n\r\n        // Read nftNumber from contract commitment\r\n        bytes commitment = tx.inputs[0].nftCommitment;\r\n        int nftNumber = int(commitment);\r\n        \r\n        // Check if minting is still allowed\r\n        require(nftNumber <= maximumCount);\r\n\r\n        // Limit the max number of outputs to 3\r\n        require(tx.outputs.length <= 3);\r\n            \r\n        // Output#0 preserves the NFT minting contract with a minting nft holding the new state and increased BCH value\r\n        require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);\r\n        require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);\r\n        int nextNftNumber = nftNumber + increment;\r\n        require(tx.outputs[0].nftCommitment == bytes(nextNftNumber));\r\n        require(tx.outputs[0].value == tx.inputs[0].value + mintPrice);\r\n\r\n        // Output#1 for the minted NFT\r\n        require(tx.outputs[1].value == 1000);\r\n        require(tx.outputs[1].nftCommitment == bytes(nftNumber));\r\n        // Strip capability to get the tokenId for an immutable NFT\r\n        bytes tokenId = tx.inputs[0].tokenCategory.split(32)[0];\r\n        require(tx.outputs[1].tokenCategory == tokenId);\r\n\r\n        // Allow for BCH change output\r\n        if(tx.outputs.length == 3){\r\n            // Output#2 BCH change output for minter\r\n            require(tx.outputs[2].tokenCategory == 0x);\r\n        }\r\n    }\r\n    function payout(sig sigPayout, pubkey pkPayout) {\r\n        // Check the signature & public key against pkhPayout\r\n        require(hash160(pkPayout) == pkhPayout);\r\n        require(checkSig(sigPayout, pkPayout));\r\n        \r\n        // require minting contract to be at input index zero\r\n        require(tx.inputs.length == 1);\r\n\r\n        // Read count from contract commitment\r\n        bytes commitment = tx.inputs[0].nftCommitment;\r\n        int nftNumber = int(commitment);\r\n\r\n        // Check if minting is still ongoing\r\n        if(nftNumber <= maximumCount){\r\n            // Limit the number of outputs to 2\r\n            require(tx.outputs.length == 2);\r\n                \r\n            // Output#0 preserves the NFT minting contract with same minting nft\r\n            require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);\r\n            require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);\r\n            require(tx.outputs[0].nftCommitment == tx.inputs[0].nftCommitment);\r\n\r\n            // Output#1 payout output\r\n            require(tx.outputs[1].tokenCategory == 0x);\r\n        } else {\r\n            // Output#0 payout output\r\n            require(tx.outputs.length == 1);\r\n\r\n            // Burns minting NFT\r\n            require(tx.outputs[0].tokenCategory == 0x);\r\n        }\r\n    }\r\n}\r\n",
          "compiler": {
            "name": "cashc",
            "version": "0.8.1"
          },
          "updatedAt": "2023-09-16T11:11:05.608Z"
        }
      }
    },
    {
      "outpointIndex": 0,
      "outpointTransactionHash": {
        "0": 209,
        "1": 30,
        "2": 167,
        "3": 228,
        "4": 138,
        "5": 206,
        "6": 88,
        "7": 10,
        "8": 23,
        "9": 96,
        "10": 10,
        "11": 207,
        "12": 71,
        "13": 127,
        "14": 216,
        "15": 244,
        "16": 68,
        "17": 144,
        "18": 79,
        "19": 189,
        "20": 9,
        "21": 129,
        "22": 232,
        "23": 174,
        "24": 31,
        "25": 98,
        "26": 167,
        "27": 239,
        "28": 212,
        "29": 2,
        "30": 68,
        "31": 217
      },
      "sequenceNumber": 4294967294,
      "unlockingBytecode": {},
      "lockingBytecode": {
        "0": 118,
        "1": 169,
        "2": 20,
        "3": 142,
        "4": 226,
        "5": 109,
        "6": 108,
        "7": 159,
        "8": 88,
        "9": 54,
        "10": 159,
        "11": 148,
        "12": 134,
        "13": 77,
        "14": 195,
        "15": 99,
        "16": 12,
        "17": 222,
        "18": 177,
        "19": 127,
        "20": 174,
        "21": 47,
        "22": 45,
        "23": 136,
        "24": 172
      },
      "valueSatoshis": 134980559n
    }
  ],
  "broadcast": true,
  "userPrompt": "Mint Cash-Ninja NFT"
}

export const cashNinjaDecodedObj1 = {
  ...cashNinjaDecodedObj0,
  "transaction": {
    "inputs": [
      {
        "outpointIndex": 0,
        "outpointTransactionHash": {
          "0": 98,
          "1": 128,
          "2": 27,
          "3": 240,
          "4": 94,
          "5": 33,
          "6": 111,
          "7": 251,
          "8": 95,
          "9": 196,
          "10": 231,
          "11": 20,
          "12": 7,
          "13": 121,
          "14": 206,
          "15": 135,
          "16": 120,
          "17": 115,
          "18": 39,
          "19": 82,
          "20": 188,
          "21": 240,
          "22": 163,
          "23": 2,
          "24": 247,
          "25": 206,
          "26": 113,
          "27": 180,
          "28": 140,
          "29": 230,
          "30": 98,
          "31": 22
        },
        "sequenceNumber": 4294967294,
        "unlockingBytecode": {
          "0": 0,
          "1": 76,
          "2": 164,
          "3": 2,
          "4": 135,
          "5": 19,
          "6": 20,
          "7": 27,
          "8": 7,
          "9": 221,
          "10": 239,
          "11": 211,
          "12": 100,
          "13": 57,
          "14": 246,
          "15": 11,
          "16": 245,
          "17": 150,
          "18": 196,
          "19": 248,
          "20": 145,
          "21": 248,
          "22": 246,
          "23": 206,
          "24": 61,
          "25": 190,
          "26": 32,
          "27": 1,
          "28": 25,
          "29": 3,
          "30": 64,
          "31": 75,
          "32": 76,
          "33": 84,
          "34": 121,
          "35": 0,
          "36": 156,
          "37": 99,
          "38": 192,
          "39": 0,
          "40": 157,
          "41": 0,
          "42": 207,
          "43": 129,
          "44": 118,
          "45": 85,
          "46": 122,
          "47": 161,
          "48": 105,
          "49": 196,
          "50": 83,
          "51": 161,
          "52": 105,
          "53": 0,
          "54": 205,
          "55": 0,
          "56": 199,
          "57": 136,
          "58": 0,
          "59": 209,
          "60": 0,
          "61": 206,
          "62": 136,
          "63": 118,
          "64": 83,
          "65": 122,
          "66": 147,
          "67": 0,
          "68": 210,
          "69": 136,
          "70": 0,
          "71": 204,
          "72": 0,
          "73": 198,
          "74": 83,
          "75": 122,
          "76": 147,
          "77": 157,
          "78": 81,
          "79": 204,
          "80": 2,
          "81": 232,
          "82": 3,
          "83": 157,
          "84": 81,
          "85": 210,
          "86": 136,
          "87": 0,
          "88": 206,
          "89": 1,
          "90": 32,
          "91": 127,
          "92": 117,
          "93": 81,
          "94": 209,
          "95": 136,
          "96": 196,
          "97": 83,
          "98": 156,
          "99": 99,
          "100": 82,
          "101": 209,
          "102": 0,
          "103": 136,
          "104": 104,
          "105": 109,
          "106": 81,
          "107": 103,
          "108": 84,
          "109": 122,
          "110": 81,
          "111": 157,
          "112": 85,
          "113": 121,
          "114": 169,
          "115": 83,
          "116": 122,
          "117": 136,
          "118": 83,
          "119": 122,
          "120": 84,
          "121": 122,
          "122": 173,
          "123": 195,
          "124": 81,
          "125": 157,
          "126": 0,
          "127": 207,
          "128": 129,
          "129": 83,
          "130": 122,
          "131": 161,
          "132": 99,
          "133": 196,
          "134": 82,
          "135": 157,
          "136": 0,
          "137": 205,
          "138": 0,
          "139": 199,
          "140": 136,
          "141": 0,
          "142": 209,
          "143": 0,
          "144": 206,
          "145": 136,
          "146": 0,
          "147": 210,
          "148": 0,
          "149": 207,
          "150": 136,
          "151": 81,
          "152": 209,
          "153": 0,
          "154": 136,
          "155": 103,
          "156": 196,
          "157": 81,
          "158": 157,
          "159": 0,
          "160": 209,
          "161": 0,
          "162": 136,
          "163": 104,
          "164": 109,
          "165": 81,
          "166": 104
        }
      },
      {
        "outpointIndex": 0,
        "outpointTransactionHash": {
          "0": 209,
          "1": 30,
          "2": 167,
          "3": 228,
          "4": 138,
          "5": 206,
          "6": 88,
          "7": 10,
          "8": 23,
          "9": 96,
          "10": 10,
          "11": 207,
          "12": 71,
          "13": 127,
          "14": 216,
          "15": 244,
          "16": 68,
          "17": 144,
          "18": 79,
          "19": 189,
          "20": 9,
          "21": 129,
          "22": 232,
          "23": 174,
          "24": 31,
          "25": 98,
          "26": 167,
          "27": 239,
          "28": 212,
          "29": 2,
          "30": 68,
          "31": 217
        },
        "sequenceNumber": 4294967294,
        "unlockingBytecode": {}
      }
    ],
    "locktime": 0,
    "outputs": [
      {
        "lockingBytecode": {
          "0": 170,
          "1": 32,
          "2": 62,
          "3": 115,
          "4": 147,
          "5": 185,
          "6": 39,
          "7": 100,
          "8": 157,
          "9": 98,
          "10": 103,
          "11": 77,
          "12": 250,
          "13": 152,
          "14": 131,
          "15": 176,
          "16": 250,
          "17": 162,
          "18": 113,
          "19": 136,
          "20": 115,
          "21": 14,
          "22": 231,
          "23": 180,
          "24": 8,
          "25": 111,
          "26": 165,
          "27": 134,
          "28": 27,
          "29": 45,
          "30": 249,
          "31": 21,
          "32": 20,
          "33": 42,
          "34": 135
        },
        "token": {
          "amount": 0n,
          "category": {
            "0": 119,
            "1": 169,
            "2": 84,
            "3": 16,
            "4": 160,
            "5": 124,
            "6": 35,
            "7": 146,
            "8": 195,
            "9": 64,
            "10": 56,
            "11": 74,
            "12": 239,
            "13": 50,
            "14": 58,
            "15": 234,
            "16": 144,
            "17": 46,
            "18": 191,
            "19": 166,
            "20": 152,
            "21": 163,
            "22": 88,
            "23": 21,
            "24": 196,
            "25": 239,
            "26": 16,
            "27": 0,
            "28": 98,
            "29": 198,
            "30": 216,
            "31": 172
          },
          "nft": {
            "capability": "minting",
            "commitment": {
              "0": 244,
              "1": 6
            }
          }
        },
        "valueSatoshis": 5001000n
      },
      {
        "lockingBytecode": {
          "0": 118,
          "1": 169,
          "2": 20,
          "3": 142,
          "4": 226,
          "5": 109,
          "6": 108,
          "7": 159,
          "8": 88,
          "9": 54,
          "10": 159,
          "11": 148,
          "12": 134,
          "13": 77,
          "14": 195,
          "15": 99,
          "16": 12,
          "17": 222,
          "18": 177,
          "19": 127,
          "20": 174,
          "21": 47,
          "22": 45,
          "23": 136,
          "24": 172
        },
        "token": {
          "amount": 0n,
          "category": {
            "0": 119,
            "1": 169,
            "2": 84,
            "3": 16,
            "4": 160,
            "5": 124,
            "6": 35,
            "7": 146,
            "8": 195,
            "9": 64,
            "10": 56,
            "11": 74,
            "12": 239,
            "13": 50,
            "14": 58,
            "15": 234,
            "16": 144,
            "17": 46,
            "18": 191,
            "19": 166,
            "20": 152,
            "21": 163,
            "22": 88,
            "23": 21,
            "24": 196,
            "25": 239,
            "26": 16,
            "27": 0,
            "28": 98,
            "29": 198,
            "30": 216,
            "31": 172
          },
          "nft": {
            "capability": "none",
            "commitment": {
              "0": 219,
              "1": 6
            }
          }
        },
        "valueSatoshis": 1000n
      },
      {
        "lockingBytecode": {
          "0": 118,
          "1": 169,
          "2": 20,
          "3": 142,
          "4": 226,
          "5": 109,
          "6": 108,
          "7": 159,
          "8": 88,
          "9": 54,
          "10": 159,
          "11": 148,
          "12": 134,
          "13": 77,
          "14": 195,
          "15": 99,
          "16": 12,
          "17": 222,
          "18": 177,
          "19": 127,
          "20": 174,
          "21": 47,
          "22": 45,
          "23": 136,
          "24": 172
        },
        "valueSatoshis": 129978559n
      }
    ],
    "version": 2
  }
}